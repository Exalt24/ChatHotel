<% if flash[:success] %>
  <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4 mt-4 ml-4 mr-4" role="alert">
    <span class="block sm:inline"><%= flash[:success] %></span>
  </div>
<% elsif flash[:error] %>
  <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 mt-4 ml-4 mr-4" role="alert">
    <span class="block sm:inline"><%= flash[:error] %></span>
  </div>
<% end %>

<% if @booking.errors.any? %>
  <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 mt-4 ml-4 mr-4" role="alert">
    <ul>
      <% @booking.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<h1 class="text-3xl font-bold text-center mb-8 mt-8 text-white">Book a Room</h1>
<div class="bg-gray-800 flex justify-center mb-8">
  <div class="w-full max-w-md">
    <%= form_with(model: @booking, url: bookings_path, method: :post, html: { class: "bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" }) do |form| %>

      <%= form.hidden_field :hotel_id, value: @hotel.id %>

      <div class="mb-4">
        <% booked_hotel = Hotel.find(@hotel.id) %>
        <%= form.label :hotel_name, "Booked Hotel", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= text_field_tag :hotel_name, booked_hotel.name, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline", readonly: true %>
      </div>

      <div class="mb-4">
        <%= form.label :booked_name, "Booked Name", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= text_field_tag :booked_name, "#{@current_user.first_name} #{@current_user.last_name}", class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline", readonly: true %>
      </div>

      <div class="mb-4">
        <%= form.label :booked_number, "Booked Number", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= text_field_tag :booked_number, @booking.booked_number, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline", readonly: true %>
      </div>

        <div class="flex items-center gap-2">
          <div class="mb-4">
        <%= form.label :start_date, "Start Date", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= text_field_tag :start_date, nil, class: "check-in-date shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline", readonly: true %>
        </div>
        <div class="mb-4">
        <%= form.label :end_date, "End Date", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= text_field_tag :end_date, nil, class: "check-out-date shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline", readonly: true %>
        </div>
      </div>

      <div>
          <div id="date-picker-container"></div>
      </div>

      <div class="mb-4">
        <button type="button" id="change-date" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
          Change Date
        </button>
      </div>


      <div class="mb-6">
        <%= form.label :room_type, "Room Type", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <div class="flex items-center gap-2">
          <%= form.select :room_type, [['Single', 'single_room'], ['Double', 'double_room'], ['Suite', 'suite']], {}, class: "room-type shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline flex-grow" %>
          <span id="room-price" class="text-gray-700 font-bold"></span>
        </div>
      </div>

      

      <div class="mb-4">
        <%= form.label :total_cost, "Total Cost", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <div class="flex items-center gap-2">
          <span class="currency-symbol">$</span>
          <%= form.text_field :total_cost, id: "total-cost", class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline", readonly: true %>
        </div>
      </div>


      <div class="flex items-center justify-between">
        <%= link_to "Back to Hotels", hotels_path, class: "bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" %>
        <%= form.submit 'Book Room', class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline", data: { confirm: 'Are you sure you want to book this room?' } %>
      </div>

    <% end %>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const startDateField = document.querySelector('.check-in-date');
  const endDateField = document.querySelector('.check-out-date');
  const datePickerContainer = document.getElementById('date-picker-container');
  const roomTypeField = document.querySelector('.room-type');
  const roomPriceSpan = document.getElementById('room-price');
  const changeDateButton = document.getElementById('change-date');

  let fp; // Flatpickr instance

  // Function to initialize Flatpickr
  function initializeFlatpickr() {
    fp = flatpickr(datePickerContainer, {
      mode: 'range',
      dateFormat: 'Y-m-d',
      minDate: 'today',
      onChange: function(selectedDates, dateStr, instance) {
        if (selectedDates.length === 2) {
          startDateField.value = fp.formatDate(selectedDates[0], 'Y-m-d');
          endDateField.value = fp.formatDate(selectedDates[1], 'Y-m-d');
          calculatePrice(); // Update total_cost when dates change
        }
      }
    });
    
    fp.open(); // Ensure Flatpickr opens after initialization
  }

  // Event listener for the "Change Date" button
  changeDateButton.addEventListener('click', function() {
    if (fp) {
      fp.destroy(); // Destroy existing Flatpickr instance
    }
    initializeFlatpickr(); // Reinitialize Flatpickr on button click
  });

  // Function to update room price based on selected room type
  function updateRoomPrice() {
    const roomType = roomTypeField.value;
    const hotelId = '<%= @hotel.id %>';

    fetch('/hotels/' + hotelId + '/room_price', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ room_type: roomType })
    })
    .then(response => response.json())
    .then(data => {
      if (data.room_price !== undefined) {
        roomPriceSpan.textContent = 'Price: $' + data.room_price;
        calculatePrice(); // Update total_cost when room type changes
      } else if (data.error) {
        alert('Error fetching room price: ' + data.error);
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
  }

  // Function to calculate total cost based on selected dates and room type
  // Function to calculate total cost based on selected dates and room type
function calculatePrice() {
  const startDate = startDateField.value;
  const endDate = endDateField.value;
  const roomType = roomTypeField.value;
  const hotelId = '<%= @hotel.id %>';

  // Check if startDate, endDate, and roomType are present
  if (startDate && endDate && roomType) {
    fetch('<%= calculate_price_bookings_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        start_date: startDate,
        end_date: endDate,
        room_type: roomType,
        hotel_id: hotelId
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.total_cost !== undefined) {
        document.getElementById('total-cost').value = data.total_cost;
      } else {
        document.getElementById('total-cost').value = 0; // Set default value if total_cost is not returned
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
  } else {
    alert("Please fill in all the fields!")
    document.getElementById('total-cost').value = 0;
  }
}


  // Event listeners for changes in start date, end date, and room type
  startDateField.addEventListener('change', calculatePrice);
  endDateField.addEventListener('change', calculatePrice);
  roomTypeField.addEventListener('change', updateRoomPrice);

  // Initial room price update
  updateRoomPrice();
});



</script>